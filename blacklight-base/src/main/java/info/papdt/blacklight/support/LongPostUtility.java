package info.papdt.blacklight.support;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.DisplayMetrics;
import android.util.Log;

import java.util.ArrayList;
import java.util.HashMap;

import info.papdt.blacklight.R;
import static info.papdt.blacklight.BuildConfig.DEBUG;

public class LongPostUtility {
	private static final String TAG = LongPostUtility.class.getSimpleName();
	
	private static final int PADDING = 40;
	
	private static final int TYPE_BOLD = 0,
							TYPE_ITALIC = 1,
							TYPE_DELETED = 2;

	public static Bitmap parseLongPost(Context context, String text, Bitmap pic) {
		if (DEBUG) {
			Log.d(TAG, "parseLongPost");
			Log.d(TAG, "text = " + text);
		}

		// Measure the current screen dimensions
		DisplayMetrics dm = context.getResources().getDisplayMetrics();

		// Get width and height
		int width = dm.widthPixels;
		int height = -1; // We will calculate this later
		int picWidth = width - 20, picHeight = 0; // We will calculate this later
		int textWidth = width - PADDING * 2; // For padding

		// Create the paint first to measue text
		TextPaint paint = new TextPaint();
		paint.setAntiAlias(true);
		paint.setTextSize(15.0f);

		// Parse the tags and trip the string
		ArrayList<HashMap<String, Integer>> format = new ArrayList<HashMap<String, Integer>>();
		String tmp = text;

		String stripped = "";

		boolean ignore = false;

		while (tmp.length() > 0) {
			String str = tmp.substring(0, 1);

			// The escape character is "\"
			if (str.equals("\\") && !ignore) {
				// \*This is not Italic text \*
				tmp = tmp.substring(1, tmp.length());
				ignore = true;
				continue;
			}

			// Simple text formatting
			// Thanks to Markdown
			if (str.equals("_") && tmp.length() > 1 && tmp.substring(1, 2).equals("_") && !ignore) {
				// __This is bold text__
				tmp = tmp.substring(2, tmp.length());
				HashMap<String, Integer> map = new HashMap<String, Integer>();
				map.put("pos", stripped.length());
				map.put("type", TYPE_BOLD);
				format.add(map);
				continue;
			} else if (str.equals("*") && !ignore) {
				// *This is Italic text*
				tmp = tmp.substring(1, tmp.length());
				HashMap<String, Integer> map = new HashMap<String, Integer>();
				map.put("pos", stripped.length());
				map.put("type", TYPE_ITALIC);
				format.add(map);
				continue;
			} else if (str.equals("~") && tmp.length() > 1 && tmp.substring(1, 2).equals("~") && !ignore) {
				// ~~This is deleted text~~
				tmp = tmp.substring(2, tmp.length());
				HashMap<String, Integer> map = new HashMap<String, Integer>();
				map.put("pos", stripped.length());
				map.put("type", TYPE_DELETED);
				format.add(map);
				continue;
			} else if (str.equals("[") && tmp.length() > 1 && !ignore) {
				// Inspired from shell's coloring
				// [rRed Text[d
				// [gGreen Text[d
				// [bBlue Text[d
				// [yYellow Text[d
				// [cCyan Text[d
				// [mMagenta Text[d
				// [dDefault Color[d
				String color = tmp.substring(1, 2);
				int type = Integer.MIN_VALUE;
				if (color.equals("r")) {
					type = Color.RED;
				} else if (color.equals("g")) {
					type = Color.GREEN;
				} else if (color.equals("b")) {
					type = Color.BLUE;
				} else if (color.equals("y")) {
					type = Color.YELLOW;
				} else if (color.equals("c")) {
					type = Color.CYAN;
				} else if (color.equals("m")) {
					type = Color.MAGENTA;
				} else if (color.equals("d")) {
					type = -1;
				} else if (color.equals("#")) {
					color = tmp.substring(1, 8);
					type = Color.parseColor(color);
				}

				if (type > Integer.MIN_VALUE) {
					HashMap<String, Integer> map = new HashMap<String, Integer>();
					map.put("pos", stripped.length());
					map.put("type", type);
					format.add(map);
					tmp = tmp.substring(color.length() + 1, tmp.length());
					continue;
				}
			}

			ignore = false;

			stripped += str;
			tmp = tmp.substring(1, tmp.length());
		}

		// Generated By BlackLight
		String from = context.getResources().getString(R.string.long_from);
		stripped += "\n\n" + from;
		
		if (DEBUG) {
			Log.d(TAG, "text = " + stripped);
		}
		
		// Build the layout
		StaticLayout layout = new StaticLayout(stripped, paint, textWidth,
				Layout.Alignment.ALIGN_NORMAL, 1.0f, 1.0f, false);

		// Calculate height
		height = layout.getLineTop(layout.getLineCount()) + PADDING * 2;

		if (pic != null) {
			picHeight = (int) (((float) picWidth / (float) pic.getWidth()) * pic.getHeight());
			height += picHeight + 20;

			if (DEBUG) {
				Log.d(TAG, "picHeight = " + picHeight + "; height = " + height
					  + "; pic.getHeight() = " + pic.getHeight());
				Log.d(TAG, "picWidth = " + picWidth + "; pic.getWidth() = " + pic.getWidth());
			}
		}

		// Create the bitmap and draw
		Bitmap bmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
		Canvas canvas = new Canvas(bmp);

		paint.setColor(context.getResources().getColor(android.R.color.background_light));
		canvas.drawRect(0, 0, width, height, paint);

		int defColor = context.getResources().getColor(R.color.darker_gray);
		paint.setColor(defColor);
		
		for (int i = 0; i < layout.getLineCount(); i++) {
			float y = PADDING + layout.getLineTop(i);
			float x = PADDING;
			
			if (DEBUG) {
				Log.d(TAG, "i = " + i + "; x = " + x + "; y = " + y);
			}
			
			int lastPos = layout.getLineStart(i);
			int max = layout.getLineEnd(i);
			
			// The last line is the generated-by string.
			if (i == layout.getLineCount() - 1) {
				paint.setColor(context.getResources().getColor(R.color.gray));
			}
			
			while (format.size() > 0) {
				HashMap<String, Integer> f = format.get(0);
				int pos = f.get("pos");
				int type = f.get("type");
				
				// If we have gone to the last character of this line
				// Just finish this line.
				if (pos > max) {
					break;
				}
				
				String str = stripped.substring(lastPos, pos);
				canvas.drawText(str, x, y, paint);
				x += paint.measureText(str);
				lastPos = pos;
				
				switch (type) {
					case TYPE_BOLD:
						paint.setFakeBoldText(!paint.isFakeBoldText());
						break;
					case TYPE_ITALIC:
						if (paint.getTextSkewX() >= 0.0f)
							paint.setTextSkewX(-0.25f);
						else
							paint.setTextSkewX(0.0f);
						break;
					case TYPE_DELETED:
						paint.setStrikeThruText(!paint.isStrikeThruText());
						break;
					case -1:
						paint.setColor(defColor);
						break;
					default:
						paint.setColor(type);
						break;
				}
				
				format.remove(0);
			}
			
			// Not drawn? Just draw it!
			if (lastPos < max) {
				canvas.drawText(stripped.substring(lastPos, max), x, y, paint);
			}
		}

		// Draw the picture
		if (pic != null) {
			int y = layout.getLineTop(layout.getLineCount());
			canvas.drawBitmap(pic, new Rect(0, 0, pic.getWidth(), pic.getHeight()),
							  new Rect(10, y + 10, picWidth + 10, picHeight + y + 10), paint);
		}

		// Finished, return
		return bmp;
	}

	public static String parseLongContent(Context context, String content) {
		if (DEBUG) {
			Log.d(TAG, "parseLongContent");
		}

		String[] strs = content.split("\n");
		String str = "";

		if (strs.length > 0) {
			str = strs[0];
		}

		if (str.length() < 140) {
			if (TextUtils.isEmpty(str)) {
				str = context.getResources().getString(R.string.long_post);
			}

			return str;
		} else {
			return str.substring(0, 137) + "...";
		}
	}

}
